@page "/AudioFileComparison"
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inherits AudioFileComparisonModel
@rendermode InteractiveServer

<PageTitle>Сравнение аудио-отпечатков</PageTitle>

<link href="/DictionaryOfStyles.css" rel="stylesheet" />
<style>
    .header-container {
        position: relative;
        width: 100%;
    }

    .overlay-text {
        position: absolute;
        top: 30%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 100%;
        text-align: center;
    }

    h1 {
        padding: 0 20px;
    }

    h2 {
        margin: 20px 10% 10px;
    }
</style>

<header class="header-container">
    <img class="log" src="/Pictures/Headlines/FingerprintGeneration.Wave.png" style="width: 100%;height: auto;" ondragstart="return false;">
    <div class="overlay-text">
        <h1>Сравнение аудио-отпечатков</h1>
    </div>
</header>

<h2 style="margin-top: 5vw">СПЕКТРАЛЬНЫЙ АНАЛИЗ. @InfoFFT</h2>

@if (@PathFrequencyHistogramOne != "")
{
    <a class="pic" href="@PathFrequencyHistogramOne" data-lightbox="example-1">
        <img class="pic" src="@PathFrequencyHistogramOne" alt="График спектрального анализа">
    </a>
}
else
{
    <p style="color:red">Ошибка загрузки графика</p>
}
<h2>МЕТОД MFCC. @InfoMFCC</h2>

@if (@PathMFCCHistogramOne != "")
{
    <a class="pic" href="@PathMFCCHistogramOne" data-lightbox="example-2">
        <img class="pic" src="@PathMFCCHistogramOne" alt="График метода MFCC">
    </a>
}
else
{
    <p style="color:red">Ошибка загрузки графика</p>
}

<div class="buttons-container2">
    <button class="button-download2" @onclick="DownloadChartFFT">Скачать график<br />Спектрального анализа</button>
    <button class="button-download2" @onclick="DownloadChartMFCC">Скачать график<br />метода MFCC</button>
</div>

@code {
    private bool _shouldReload = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _shouldReload)
        {
            // Проверяем, не была ли уже выполнена перезагрузка
            var hasReloaded = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "audioComparisonReloaded");
            
            if (hasReloaded != "true")
            {
                // Устанавливаем флаг перезагрузки
                await JsRuntime.InvokeVoidAsync("localStorage.setItem", "audioComparisonReloaded", "true");
                
                // Перезагружаем страницу с очисткой кэша
                await JsRuntime.InvokeVoidAsync("eval", "window.location.reload(true)");
            }
            else
            {
                // Если уже перезагружались - сбрасываем флаг
                await JsRuntime.InvokeVoidAsync("localStorage.removeItem", "audioComparisonReloaded");
                _shouldReload = false;
            }
        }
    }

    public void DownloadChartFFT()
    {
        if (string.IsNullOrEmpty(PathFrequencyHistogramOne))
        {
            JsRuntime.InvokeVoidAsync("alert", "ОШИБКА ЗАГРУЗКИ");
            return;
        }

        try
        {
            var downloadsPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                "Downloads");

            Directory.CreateDirectory(downloadsPath);

            string sourcePath = Path.Combine("wwwroot", "Pictures", "Histogram", "frequency_histogram_two.png");
            string destPath = Path.Combine(downloadsPath,
                $"frequency_histogram_compare_{DateTime.Now:yyyyMMdd_HHmmss}.png");

            File.Copy(sourcePath, destPath, overwrite: true);
            JsRuntime.InvokeVoidAsync("alert", "Загрузка выполнена успешно!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при скачивании FFT: {ex.Message}");
            JsRuntime.InvokeVoidAsync("alert", "Ошибка при скачивании файла");
        }
    }

    public void DownloadChartMFCC()
    {
        if (string.IsNullOrEmpty(PathMFCCHistogramOne))
        {
            JsRuntime.InvokeVoidAsync("alert", "ОШИБКА ЗАГРУЗКИ");
            return;
        }

        try
        {
            var downloadsPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                "Downloads");

            Directory.CreateDirectory(downloadsPath);

            string sourcePath = Path.Combine("wwwroot", "Pictures", "Histogram", "mfcc_histogram_two.png");
            string destPath = Path.Combine(downloadsPath,
                $"mfcc_histogram_compare_{DateTime.Now:yyyyMMdd_HHmmss}.png");

            File.Copy(sourcePath, destPath, overwrite: true);
            JsRuntime.InvokeVoidAsync("alert", "Загрузка выполнена успешно!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при скачивании MFCC: {ex.Message}");
            JsRuntime.InvokeVoidAsync("alert", "Ошибка при скачивании файла");
        }
    }
}