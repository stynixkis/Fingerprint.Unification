@page "/"
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inherits HomeModel
@rendermode InteractiveServer
<PageTitle>Главная</PageTitle>
<link href="/DictionaryOfStyles.css" rel="stylesheet" />
<style>

</style>
<header>
	<img class="log" src="/Pictures/Headlines/MainWave.png" style="width: 100%;height: auto;" ondragstart="return false;">
	<div class="container">
		<div class="overlay-text">
			<h1>Acoustic fingerprint</h1>
			<p>
				сжатая цифровая сводка, цифровой отпечаток пальца, детерминированно сгенерированный
				на основе аудиосигнала, который можно использовать для идентификации аудиосэмпла
				или быстрого поиска похожих элементов в музыкальной базе данных.
			</p>
		</div>
	</div>
</header>

<label class="button-download">
	📁 Выбрать .wav файл
	<InputFile OnChange="ExeptionView"
			   accept=".wav"
			   style="display: none;" />
</label>

@code{
	private bool _shouldReload = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && _shouldReload)
		{
			// Проверяем, не была ли уже выполнена перезагрузка
			var hasReloaded = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "audioComparisonReloaded");

			if (hasReloaded != "true")
			{
				// Устанавливаем флаг перезагрузки
				await JsRuntime.InvokeVoidAsync("localStorage.setItem", "audioComparisonReloaded", "true");

				// Перезагружаем страницу с очисткой кэша
				await JsRuntime.InvokeVoidAsync("eval", "window.location.reload(true)");
			}
			else
			{
				// Если уже перезагружались - сбрасываем флаг
				await JsRuntime.InvokeVoidAsync("localStorage.removeItem", "audioComparisonReloaded");
				_shouldReload = false;
			}
		}
	}
	public async Task ExeptionView(InputFileChangeEventArgs e)
	{
		try
		{
			if (!e.File.Name.EndsWith(".wav", StringComparison.OrdinalIgnoreCase))
			{
				await JsRuntime.InvokeVoidAsync("alert", "Требуется файл формата .wav");
				return;
			}
			Console.WriteLine(e.File.Size);
			if (e.File.Size > 50 * 1024 * 1024)
			{
				await JsRuntime.InvokeVoidAsync("alert", "Размер файла должен быть не больше 50 МБ");
				return;
			}

			HandleFileSelected(e);
		}
		catch (Exception ex)
		{
			Console.WriteLine("Ошибка: " + ex.Message);
		}
	}
	public async Task ClearCache()
	{
		await JsRuntime.InvokeVoidAsync("eval",
			"caches.keys().then(function(names) { names.forEach(function(name) { caches.delete(name); }) }");

		await JsRuntime.InvokeVoidAsync("eval",
			"if ('serviceWorker' in navigator) { navigator.serviceWorker.getRegistrations().then(function(registrations) { registrations.forEach(function(registration) { registration.unregister(); }); } }");
	}
}